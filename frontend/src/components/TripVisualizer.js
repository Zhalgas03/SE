// src/components/TripVisualizer.jsx
import React, { useRef, useState } from "react";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import TripHeader from "./TripComponents/TripHeader";
import TripOverview from "./TripComponents/TripOverview";
import TripHighlights from "./TripComponents/TripHighlights";
import TripItinerary from "./TripComponents/TripItinerary";
import TripTransfer from "./TripComponents/TripTransfer"; 
import TripStay from "./TripComponents/TripStay";

import { useTrip } from "../context/TripContext";
import "../styles/trip-mobile.css";

function TripVisualizer() {
  const { tripSummary } = useTrip();
  const pdfRef = useRef();
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [savedSuccessfully, setSavedSuccessfully] = useState(false);

  const today = new Date().toISOString().split("T")[0];
  const twoDaysLater = new Date(Date.now() + 2 * 24 * 60 * 60 * 1000)
    .toISOString()
    .split("T")[0];

  function generateTripName(summary) {
    if (!summary || !summary.destination || !summary.travel_dates) return "My Trip";
    const { destination, travel_dates, style } = summary;
    const d1 = new Date(travel_dates.start || today);
    const d2 = new Date(travel_dates.end || twoDaysLater);
    const diffDays = Math.ceil((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
    const daysText = `${diffDays}-Day`;
    const styleText = style ? `${style} Trip` : "Trip";
    return `${daysText} ${styleText} to ${destination}`;
  }

  const handleSaveToPDF = async () => {
    setIsGeneratingPDF(true);

    // —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã
    const collapses = document.querySelectorAll(".accordion-collapse");
    collapses.forEach((el) => {
      el.classList.add("show");
      el.style.height = "auto";
    });

    // —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –¥–ª—è —Å–Ω–∏–º–∫–∞
    const body = document.body;
    const wasDark = body.classList.contains("dark-theme");
    if (wasDark) body.classList.remove("dark-theme");

    // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–æ–≤–Ω–æ –ø–æ–¥ A4 (‚âà 794px @96dpi)
    const content = pdfRef.current;
    if (!content) {
      if (wasDark) body.classList.add("dark-theme");
      collapses.forEach((el) => {
        el.classList.remove("show");
        el.style.height = "";
      });
      setIsGeneratingPDF(false);
      return;
    }

    const prevStyle = {
      width: content.style.width,
      margin: content.style.margin,
      boxShadow: content.style.boxShadow,
      background: content.style.background,
      color: content.style.color,
      borderRadius: content.style.borderRadius,
      overflow: content.style.overflow,
      padding: content.style.padding,
    };

    // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, ‚Äú–ø–ª–æ—Å–∫–∞—è‚Äù –≤–µ—Ä—Å—Ç–∫–∞ –±–µ–∑ —Ç–µ–Ω–µ–π –∏ –ª–∏—à–Ω–∏—Ö –ø–∞–¥–¥–∏–Ω–≥–æ–≤
    content.style.width = "794px";
    content.style.margin = "0 auto";
    content.style.boxShadow = "none";
    content.style.background = "#ffffff";
    content.style.color = "#000000";
    content.style.borderRadius = "0";
    content.style.overflow = "visible";
    // –æ—Å—Ç–∞–≤—å —Å–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–¥–¥–∏–Ω–≥–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ‚Äî —Ç—É—Ç –æ–±—â–∏–π –ø–∞–¥–¥–∏–Ω–≥ –Ω–µ –Ω—É–∂–µ–Ω

    // –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
    await new Promise((r) => setTimeout(r, 200));

    try {
      // –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–æ–π canvas
      const canvas = await html2canvas(content, {
        scale: 2,
        backgroundColor: "#ffffff",
        useCORS: true,
        scrollX: 0,
        scrollY: -window.scrollY,
      });

      // —Å–æ–∑–¥–∞–µ–º PDF –∏ —Ä–µ–∂–µ–º canvas –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pdf = new jsPDF("p", "mm", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();   // 210
      const pageHeight = pdf.internal.pageSize.getHeight(); // 297

      // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ PDF-–ª–∏—Å—Ç–∞
      const pxPerMm = canvas.width / pageWidth;
      const pageCanvasHeightPx = Math.floor(pageHeight * pxPerMm);

      const sliceCanvas = document.createElement("canvas");
      sliceCanvas.width = canvas.width;
      sliceCanvas.height = pageCanvasHeightPx;
      const sctx = sliceCanvas.getContext("2d");

      let renderedHeight = 0;
      let firstPage = true;

      while (renderedHeight < canvas.height) {
        const sliceHeight = Math.min(pageCanvasHeightPx, canvas.height - renderedHeight);

        // –æ—á–∏—Å—Ç–∏—Ç—å –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ä–µ–∑
        sctx.clearRect(0, 0, sliceCanvas.width, sliceCanvas.height);
        sctx.fillStyle = "#ffffff";
        sctx.fillRect(0, 0, sliceCanvas.width, sliceCanvas.height);
        sctx.drawImage(
          canvas,
          0,
          renderedHeight,
          canvas.width,
          sliceHeight,
          0,
          0,
          sliceCanvas.width,
          sliceHeight
        );

        const imgData = sliceCanvas.toDataURL("image/png");
        const imgHeightMm = (sliceHeight / pxPerMm); // —Å–∫–æ–ª—å–∫–æ –º–º –∑–∞–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç —Å—Ä–µ–∑ –ø–æ –≤—ã—Å–æ—Ç–µ

        if (!firstPage) pdf.addPage();
        pdf.addImage(imgData, "PNG", 0, 0, pageWidth, imgHeightMm, undefined, "FAST");

        firstPage = false;
        renderedHeight += sliceHeight;
      }

      pdf.setProperties({ title: generateTripName(tripSummary) });
      pdf.save({title: generateTripName(tripSummary)}.pdf);
      

      // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const pdfBase64 = pdf.output("datauristring");
      const token = localStorage.getItem("token");

      const res = await fetch("http://localhost:5001/api/trips/save-with-pdf", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          name: generateTripName(tripSummary),
          date_start: today,
          date_end: twoDaysLater,
          pdf_base64: pdfBase64,
        }),
      });

      const data = await res.json();
      if (data.success) {
        setSavedSuccessfully(true);
        setTimeout(() => setSavedSuccessfully(false), 3000);
      } else {
        console.error("‚ùå Failed to save trip:", data.message || "Unknown error");
      }
    } catch (err) {
      console.error("‚ùå Error saving trip:", err);
    } finally {
      // –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∏–ª–∏
      Object.assign(content.style, prevStyle);

      // –≤–µ—Ä–Ω—É—Ç—å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã/—Ç–µ–º—É
      collapses.forEach((el) => {
        el.classList.remove("show");
        el.style.height = "";
      });
      if (wasDark) body.classList.add("dark-theme");

      setIsGeneratingPDF(false);
    }
  };

  if (!tripSummary) {
    return (
      <div className="d-flex justify-content-center align-items-center h-100 text-muted p-4">
        <div className="text-center">
          <h5 className="fw-semibold mb-2">üß≠ Trip Plan will appear here</h5>
          <p className="mb-0">Start planning your trip using the chat on the left!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="trip-visualizer-container rounded-4 tripv">
      <div className="d-flex justify-content-end align-items-center gap-3 mb-3">
        <button
          className="btn btn-outline-secondary"
          onClick={handleSaveToPDF}
          disabled={isGeneratingPDF}
        >
          {isGeneratingPDF ? "Saving‚Ä¶" : savedSuccessfully ? "‚úÖ Trip saved" : "Save trip"}
        </button>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω –∏ –±–µ–∑ —Ç–µ–Ω–µ–π (—Ç–µ–Ω–∏ –º–µ—à–∞—é—Ç html2canvas) */}
      <div
        ref={pdfRef}
        id="trip-pdf-content"
        style={{
          width: "860px",           // —à–∏—Ä–µ –¥–ª—è UI (–Ω–∞ —ç–∫—Ä–∞–Ω–µ)
          maxWidth: "100%",
          margin: "0 auto",
          background: "transparent",
        }}
      >
        <TripHeader summary={tripSummary} />
        <TripOverview summary={tripSummary} />
        <TripHighlights summary={tripSummary} />
        <TripItinerary summary={tripSummary} isGeneratingPDF={isGeneratingPDF} />
        <TripTransfer summary={tripSummary} />
  <TripStay summary={tripSummary} />
      </div>
    </div>
  );
}

export default TripVisualizer;
